Refl {
    Program
      = ListOf<Stmt, StmtDelim?>

    Stmt
      = Expr StmtDelim? 
     
    StmtDelim = #";" | #"\n"

    Expr
      = Assignment
      | Defun
      | Conditional
      | CmpExpr

	  Block = "{" Program "}"
    FunctionBody = "{" Program "}"

    Conditional
      = Expr "?" Expr ":" Expr -- ternary
      | "if" "(" Expr ")" Block "else" Block -- if_else
      | "if" "(" Expr ")" Block -- if
 
    Defun
      = FunArgs "=>" Expr -- one
      | FunArgs "=>"? FunctionBody -- multi
    
    FunArgs
      = "(" ListOf<ident, ","> ")"
    
    Assignment
      = ident "=" Expr

    CmpExpr
      = LogExpr ">" LogExpr -- gt
      | LogExpr "<" LogExpr -- lt
      | LogExpr "==" LogExpr -- eq
      | LogExpr "<=" LogExpr -- lte
      | LogExpr ">=" LogExpr -- gte
      | LogExpr
    
    LogExpr
      = LogExpr "||" AddExpr -- or 
      | LogExpr "&&" AddExpr -- and
      | "!" LogExpr -- not
      | AddExpr
    
    AddExpr
      = AddExpr "+" MultExpr -- sum
      | AddExpr "-" MultExpr -- difference
      | MultExpr

    MultExpr
      = MultExpr "*" ExpExpr -- product
      | MultExpr "/" ExpExpr -- quotient
      | ExpExpr

    ExpExpr
      = PriExpr "^" ExpExpr -- power
      | PriExpr

    PriExpr
      = Funcall
      | "(" Expr ")" -- parens
      // | "+" PriExpr -- pos 
      | "-" PriExpr -- neg 
      | ident
      | number
    
    Funcall
      = ident "(" ListOf<Expr, ","> ")"

    ident
      = letter alnum*
    
    number
      = digit+

  comment
      = #"#" #(~"\n" any)* "\n"?

	space += comment  
    
}