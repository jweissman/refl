Refl {
    Program
      = ListOf<Expr, delim?> delim*
    delim = ";" | lineTerminator
    //lineTerminator

    Expr
      = Assignment
      | Lambda
      | Conditional
      | Defun
      | Defclass
      | Keyword
      | CmpExpr

	  Block = "{" Program "}"

    Conditional
      = Expr "?" Expr ":" Expr -- ternary
      | "if" "(" Expr ")" Block "else" Block -- if_else
      | "if" "(" Expr ")" Block -- if

    Keyword
      = While
      | Using

    While
     = "while" "(" Expr ")" Block 
    
    Using
     = "using" StringLit

    Defun = (ident | Op) Lambda
    Op = "[]"
    Defclass = "class" ident Block

    Lambda
      = FunArgs "=>" Expr -- one
      | FunArgs "=>"? Block -- multi
    
    FunArgs
      = "(" ListOf<ident, ","> ")"
    
    Assignment
      = Expr "=" Expr

    CmpExpr
      = LogExpr ">" LogExpr -- gt
      | LogExpr "<" LogExpr -- lt
      | LogExpr "==" LogExpr -- eq
      | LogExpr "!=" LogExpr -- neq
      | LogExpr "<=" LogExpr -- lte
      | LogExpr ">=" LogExpr -- gte
      | LogExpr
    
    LogExpr
      = LogExpr "||" LogExpr -- or 
      | LogExpr "&&" LogExpr -- and
      | "!" LogExpr -- not
      | AddExpr
    
    AddExpr
      = AddExpr "+" MultExpr -- sum
      | AddExpr "-" MultExpr -- difference
      | MultExpr

    MultExpr
      = MultExpr "*" ExpExpr -- product
      | MultExpr "/" ExpExpr -- quotient
      | ExpExpr

    ExpExpr
      = PriExpr "^" ExpExpr -- power
      | PriExpr

    PriExpr
      = 
      | "(" Expr ")" -- parens
      | "-" PriExpr -- neg
      | ArrayIndex "=" Expr -- array_write
      | DotAccess
	    | Funcall
      | ArrayIndex
      | Funcall
      | Lambda
      | ArrayLit
      | StringLit
      | HashLit
      | BooleanLit
      | ident
      | number
    
    BooleanLit
      = "true" -- true
      | "false" -- false
    
    HashLit
      = "{" ListOf<KeyValuePair, ","> "}"
    
    KeyValuePair
      = ident ":" Expr
      
    ArrayLit
      = "[" ListOf<Expr, ","> "]"
    
    ArrayIndex
      = 
      //| Receiver "[" Expr "]"  "=" -- write
      | Receiver "[" Expr "]" -- read
      
    Funcall
      = Receiver Params

    Params = "(" ListOf<Expr, ","> ")" 

    DotAccess
      = Receiver "." Funcall -- method
      | Receiver "." ident -- property
    
    Receiver
      = PriExpr
    StringLit
      = "'" #singleStringCharacter* "'"
      | "\"" #doubleStringCharacter* "\""

    singleStringCharacter
      = ~("\'" | "\\" | "\n") sourceCharacter -- non_escaped
      | "\\" unicodeLiteral                   -- escaped
   
    doubleStringCharacter
      = ~("\"" | "\\" | "\n") sourceCharacter -- non_escaped
      | "\\" unicodeLiteral                   -- escaped
    
    sourceCharacter = any
    
    unicodeLiteral
      = "u" hexDigit hexDigit hexDigit hexDigit

    ident
      = (~keyword) (letter | "_") (alnum | "_")*
    
    number
      = digit+

    keyword
      = "while"
      | "using"

	  space := whitespace | lineTerminator | comment  
    // Override Ohm's built-in definition of space.
    //space := whitespace | comment 
    whitespace = #" " | " " | "\t"
    lineTerminator = "\n" | "\r"

    comment
      = #"#" #(~lineTerminator any)* lineTerminator?

}