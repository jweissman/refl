Refl {
    Program
      = ListOf<Expr, br*> br*
	  br = ";" | "\n" | "\r"

    Expr
      = Assignment
      | Lambda
      | Conditional
      | Defun
      | Defclass
      | While
      | CmpExpr

	  Block = "{" Program "}"

    Conditional
      = Expr "?" Expr ":" Expr -- ternary
      | "if" "(" Expr ")" Block "else" Block -- if_else
      | "if" "(" Expr ")" Block -- if

    While
     = "while" "(" Expr ")" Block 

    Defun = ident Lambda
    Defclass = "class" ident Block

    Lambda
      = FunArgs "=>" Expr -- one
      | FunArgs "=>"? Block -- multi
    
    FunArgs
      = "(" ListOf<ident, ","> ")"
    
    Assignment
      = (ArrayIndex | DotAccess | ident) "=" Expr

    CmpExpr
      = LogExpr ">" LogExpr -- gt
      | LogExpr "<" LogExpr -- lt
      | LogExpr "==" LogExpr -- eq
      | LogExpr "<=" LogExpr -- lte
      | LogExpr ">=" LogExpr -- gte
      | LogExpr
    
    LogExpr
      = LogExpr "||" LogExpr -- or 
      | LogExpr "&&" LogExpr -- and
      | "!" LogExpr -- not
      | AddExpr
    
    AddExpr
      = AddExpr "+" MultExpr -- sum
      | AddExpr "-" MultExpr -- difference
      | MultExpr

    MultExpr
      = MultExpr "*" ExpExpr -- product
      | MultExpr "/" ExpExpr -- quotient
      | ExpExpr

    ExpExpr
      = PriExpr "^" ExpExpr -- power
      | PriExpr

    PriExpr
      = 
      | "(" Expr ")" -- parens
      | "-" PriExpr -- neg 
      | DotAccess
      | ArrayIndex
  	  | Funcall
      | ArrayLit
      | StringLit
      | HashLit
      | ident
      | number
    
    HashLit
      = "{" ListOf<KeyValuePair, ","> "}"
    
    KeyValuePair
      = ident ":" Expr
      
    ArrayLit
      = "[" ListOf<Expr, ","> "]"
    
    ArrayIndex = (Funcall | ArrayIndex | ident) "[" Expr "]"
    
    Funcall
      = ident "(" ListOf<Expr, ","> ")"

    DotAccess
      = (DotAccess | ident) "." Funcall -- method
      | (DotAccess | ident) "." ident -- property

    StringLit
      = "'" #(~"'" any)* "'"
      | "\"" #(~"\"" any)* "\""

    ident
      = letter alnum*
    
    number
      = digit+

    comment
      = #"#" #(~"\n" any)* "\n"?

	  space += comment  
}